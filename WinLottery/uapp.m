/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "uapp.h"

@implementation Result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRet: (int32_t) ret msg: (NSString *) msg
{
  self = [super init];
  __ret = ret;
  __ret_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ret"])
  {
    __ret = [decoder decodeInt32ForKey: @"ret"];
    __ret_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ret_isset)
  {
    [encoder encodeInt32: __ret forKey: @"ret"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (int32_t) ret {
  return __ret;
}

- (void) setRet: (int32_t) ret {
  __ret = ret;
  __ret_isset = YES;
}

- (BOOL) retIsSet {
  return __ret_isset;
}

- (void) unsetRet {
  __ret_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Result"];
  if (__ret_isset) {
    [outProtocol writeFieldBeginWithName: @"ret" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __ret];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Result("];
  [ms appendString: @"ret:"];
  [ms appendFormat: @"%i", __ret];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id name: (NSString *) name allMoney: (double) allMoney availableMoney: (double) availableMoney blockedMoney: (double) blockedMoney loginTimes: (int32_t) loginTimes todayCost: (double) todayCost todayWin: (double) todayWin score: (int32_t) score msgNum: (int32_t) msgNum key: (NSString *) key
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __allMoney = allMoney;
  __allMoney_isset = YES;
  __availableMoney = availableMoney;
  __availableMoney_isset = YES;
  __blockedMoney = blockedMoney;
  __blockedMoney_isset = YES;
  __loginTimes = loginTimes;
  __loginTimes_isset = YES;
  __todayCost = todayCost;
  __todayCost_isset = YES;
  __todayWin = todayWin;
  __todayWin_isset = YES;
  __score = score;
  __score_isset = YES;
  __msgNum = msgNum;
  __msgNum_isset = YES;
  __key = [key retain_stub];
  __key_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"allMoney"])
  {
    __allMoney = [decoder decodeDoubleForKey: @"allMoney"];
    __allMoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"availableMoney"])
  {
    __availableMoney = [decoder decodeDoubleForKey: @"availableMoney"];
    __availableMoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"blockedMoney"])
  {
    __blockedMoney = [decoder decodeDoubleForKey: @"blockedMoney"];
    __blockedMoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginTimes"])
  {
    __loginTimes = [decoder decodeInt32ForKey: @"loginTimes"];
    __loginTimes_isset = YES;
  }
  if ([decoder containsValueForKey: @"todayCost"])
  {
    __todayCost = [decoder decodeDoubleForKey: @"todayCost"];
    __todayCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"todayWin"])
  {
    __todayWin = [decoder decodeDoubleForKey: @"todayWin"];
    __todayWin_isset = YES;
  }
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeInt32ForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgNum"])
  {
    __msgNum = [decoder decodeInt32ForKey: @"msgNum"];
    __msgNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__allMoney_isset)
  {
    [encoder encodeDouble: __allMoney forKey: @"allMoney"];
  }
  if (__availableMoney_isset)
  {
    [encoder encodeDouble: __availableMoney forKey: @"availableMoney"];
  }
  if (__blockedMoney_isset)
  {
    [encoder encodeDouble: __blockedMoney forKey: @"blockedMoney"];
  }
  if (__loginTimes_isset)
  {
    [encoder encodeInt32: __loginTimes forKey: @"loginTimes"];
  }
  if (__todayCost_isset)
  {
    [encoder encodeDouble: __todayCost forKey: @"todayCost"];
  }
  if (__todayWin_isset)
  {
    [encoder encodeDouble: __todayWin forKey: @"todayWin"];
  }
  if (__score_isset)
  {
    [encoder encodeInt32: __score forKey: @"score"];
  }
  if (__msgNum_isset)
  {
    [encoder encodeInt32: __msgNum forKey: @"msgNum"];
  }
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__key release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) allMoney {
  return __allMoney;
}

- (void) setAllMoney: (double) allMoney {
  __allMoney = allMoney;
  __allMoney_isset = YES;
}

- (BOOL) allMoneyIsSet {
  return __allMoney_isset;
}

- (void) unsetAllMoney {
  __allMoney_isset = NO;
}

- (double) availableMoney {
  return __availableMoney;
}

- (void) setAvailableMoney: (double) availableMoney {
  __availableMoney = availableMoney;
  __availableMoney_isset = YES;
}

- (BOOL) availableMoneyIsSet {
  return __availableMoney_isset;
}

- (void) unsetAvailableMoney {
  __availableMoney_isset = NO;
}

- (double) blockedMoney {
  return __blockedMoney;
}

- (void) setBlockedMoney: (double) blockedMoney {
  __blockedMoney = blockedMoney;
  __blockedMoney_isset = YES;
}

- (BOOL) blockedMoneyIsSet {
  return __blockedMoney_isset;
}

- (void) unsetBlockedMoney {
  __blockedMoney_isset = NO;
}

- (int32_t) loginTimes {
  return __loginTimes;
}

- (void) setLoginTimes: (int32_t) loginTimes {
  __loginTimes = loginTimes;
  __loginTimes_isset = YES;
}

- (BOOL) loginTimesIsSet {
  return __loginTimes_isset;
}

- (void) unsetLoginTimes {
  __loginTimes_isset = NO;
}

- (double) todayCost {
  return __todayCost;
}

- (void) setTodayCost: (double) todayCost {
  __todayCost = todayCost;
  __todayCost_isset = YES;
}

- (BOOL) todayCostIsSet {
  return __todayCost_isset;
}

- (void) unsetTodayCost {
  __todayCost_isset = NO;
}

- (double) todayWin {
  return __todayWin;
}

- (void) setTodayWin: (double) todayWin {
  __todayWin = todayWin;
  __todayWin_isset = YES;
}

- (BOOL) todayWinIsSet {
  return __todayWin_isset;
}

- (void) unsetTodayWin {
  __todayWin_isset = NO;
}

- (int32_t) score {
  return __score;
}

- (void) setScore: (int32_t) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (int32_t) msgNum {
  return __msgNum;
}

- (void) setMsgNum: (int32_t) msgNum {
  __msgNum = msgNum;
  __msgNum_isset = YES;
}

- (BOOL) msgNumIsSet {
  return __msgNum_isset;
}

- (void) unsetMsgNum {
  __msgNum_isset = NO;
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAllMoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAvailableMoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBlockedMoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLoginTimes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTodayCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTodayWin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMsgNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserBean"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allMoney_isset) {
    [outProtocol writeFieldBeginWithName: @"allMoney" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __allMoney];
    [outProtocol writeFieldEnd];
  }
  if (__availableMoney_isset) {
    [outProtocol writeFieldBeginWithName: @"availableMoney" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __availableMoney];
    [outProtocol writeFieldEnd];
  }
  if (__blockedMoney_isset) {
    [outProtocol writeFieldBeginWithName: @"blockedMoney" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __blockedMoney];
    [outProtocol writeFieldEnd];
  }
  if (__loginTimes_isset) {
    [outProtocol writeFieldBeginWithName: @"loginTimes" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __loginTimes];
    [outProtocol writeFieldEnd];
  }
  if (__todayCost_isset) {
    [outProtocol writeFieldBeginWithName: @"todayCost" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __todayCost];
    [outProtocol writeFieldEnd];
  }
  if (__todayWin_isset) {
    [outProtocol writeFieldBeginWithName: @"todayWin" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __todayWin];
    [outProtocol writeFieldEnd];
  }
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __score];
    [outProtocol writeFieldEnd];
  }
  if (__msgNum_isset) {
    [outProtocol writeFieldBeginWithName: @"msgNum" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __msgNum];
    [outProtocol writeFieldEnd];
  }
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserBean("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",allMoney:"];
  [ms appendFormat: @"%f", __allMoney];
  [ms appendString: @",availableMoney:"];
  [ms appendFormat: @"%f", __availableMoney];
  [ms appendString: @",blockedMoney:"];
  [ms appendFormat: @"%f", __blockedMoney];
  [ms appendString: @",loginTimes:"];
  [ms appendFormat: @"%i", __loginTimes];
  [ms appendString: @",todayCost:"];
  [ms appendFormat: @"%f", __todayCost];
  [ms appendString: @",todayWin:"];
  [ms appendFormat: @"%f", __todayWin];
  [ms appendString: @",score:"];
  [ms appendFormat: @"%i", __score];
  [ms appendString: @",msgNum:"];
  [ms appendFormat: @"%i", __msgNum];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginRespBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result userBean: (UserBean *) userBean
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __userBean = [userBean retain_stub];
  __userBean_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"userBean"])
  {
    __userBean = [[decoder decodeObjectForKey: @"userBean"] retain_stub];
    __userBean_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__userBean_isset)
  {
    [encoder encodeObject: __userBean forKey: @"userBean"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__userBean release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (UserBean *) userBean {
  return [[__userBean retain_stub] autorelease_stub];
}

- (void) setUserBean: (UserBean *) userBean {
  [userBean retain_stub];
  [__userBean release_stub];
  __userBean = userBean;
  __userBean_isset = YES;
}

- (BOOL) userBeanIsSet {
  return __userBean_isset;
}

- (void) unsetUserBean {
  [__userBean release_stub];
  __userBean = nil;
  __userBean_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserBean *fieldValue = [[UserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setUserBean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginRespBean"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userBean_isset) {
    if (__userBean != nil) {
      [outProtocol writeFieldBeginWithName: @"userBean" type: TType_STRUCT fieldID: 2];
      [__userBean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginRespBean("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",userBean:"];
  [ms appendFormat: @"%@", __userBean];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VerifyCodeRespBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result imgData: (NSString *) imgData
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __imgData = [imgData retain_stub];
  __imgData_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgData"])
  {
    __imgData = [[decoder decodeObjectForKey: @"imgData"] retain_stub];
    __imgData_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__imgData_isset)
  {
    [encoder encodeObject: __imgData forKey: @"imgData"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__imgData release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) imgData {
  return [[__imgData retain_stub] autorelease_stub];
}

- (void) setImgData: (NSString *) imgData {
  [imgData retain_stub];
  [__imgData release_stub];
  __imgData = imgData;
  __imgData_isset = YES;
}

- (BOOL) imgDataIsSet {
  return __imgData_isset;
}

- (void) unsetImgData {
  [__imgData release_stub];
  __imgData = nil;
  __imgData_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyCodeRespBean"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgData_isset) {
    if (__imgData != nil) {
      [outProtocol writeFieldBeginWithName: @"imgData" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __imgData];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VerifyCodeRespBean("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",imgData:"];
  [ms appendFormat: @"\"%@\"", __imgData];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id title: (NSString *) title content: (NSString *) content url: (NSString *) url pic: (NSString *) pic
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __pic = [pic retain_stub];
  __pic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"pic"])
  {
    __pic = [[decoder decodeObjectForKey: @"pic"] retain_stub];
    __pic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__pic_isset)
  {
    [encoder encodeObject: __pic forKey: @"pic"];
  }
}

- (void) dealloc
{
  [__title release_stub];
  [__content release_stub];
  [__url release_stub];
  [__pic release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) pic {
  return [[__pic retain_stub] autorelease_stub];
}

- (void) setPic: (NSString *) pic {
  [pic retain_stub];
  [__pic release_stub];
  __pic = pic;
  __pic_isset = YES;
}

- (BOOL) picIsSet {
  return __pic_isset;
}

- (void) unsetPic {
  [__pic release_stub];
  __pic = nil;
  __pic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsBean"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pic_isset) {
    if (__pic != nil) {
      [outProtocol writeFieldBeginWithName: @"pic" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsBean("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",pic:"];
  [ms appendFormat: @"\"%@\"", __pic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsListRespBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result total: (int32_t) total newsList: (NSMutableArray *) newsList
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __total = total;
  __total_isset = YES;
  __newsList = [newsList retain_stub];
  __newsList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt32ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"newsList"])
  {
    __newsList = [[decoder decodeObjectForKey: @"newsList"] retain_stub];
    __newsList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__total_isset)
  {
    [encoder encodeInt32: __total forKey: @"total"];
  }
  if (__newsList_isset)
  {
    [encoder encodeObject: __newsList forKey: @"newsList"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__newsList release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int32_t) total {
  return __total;
}

- (void) setTotal: (int32_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (NSMutableArray *) newsList {
  return [[__newsList retain_stub] autorelease_stub];
}

- (void) setNewsList: (NSMutableArray *) newsList {
  [newsList retain_stub];
  [__newsList release_stub];
  __newsList = newsList;
  __newsList_isset = YES;
}

- (BOOL) newsListIsSet {
  return __newsList_isset;
}

- (void) unsetNewsList {
  [__newsList release_stub];
  __newsList = nil;
  __newsList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NewsBean *_elem2 = [[NewsBean alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setNewsList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsListRespBean"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __total];
    [outProtocol writeFieldEnd];
  }
  if (__newsList_isset) {
    if (__newsList != nil) {
      [outProtocol writeFieldBeginWithName: @"newsList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__newsList count]];
        int i4;
        for (i4 = 0; i4 < [__newsList count]; i4++)
        {
          [[__newsList objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsListRespBean("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",total:"];
  [ms appendFormat: @"%i", __total];
  [ms appendString: @",newsList:"];
  [ms appendFormat: @"%@", __newsList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HomeRespBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result scrollNewsList: (NSMutableArray *) scrollNewsList winsList: (NSMutableArray *) winsList newsList: (NSMutableArray *) newsList
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __scrollNewsList = [scrollNewsList retain_stub];
  __scrollNewsList_isset = YES;
  __winsList = [winsList retain_stub];
  __winsList_isset = YES;
  __newsList = [newsList retain_stub];
  __newsList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"scrollNewsList"])
  {
    __scrollNewsList = [[decoder decodeObjectForKey: @"scrollNewsList"] retain_stub];
    __scrollNewsList_isset = YES;
  }
  if ([decoder containsValueForKey: @"winsList"])
  {
    __winsList = [[decoder decodeObjectForKey: @"winsList"] retain_stub];
    __winsList_isset = YES;
  }
  if ([decoder containsValueForKey: @"newsList"])
  {
    __newsList = [[decoder decodeObjectForKey: @"newsList"] retain_stub];
    __newsList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__scrollNewsList_isset)
  {
    [encoder encodeObject: __scrollNewsList forKey: @"scrollNewsList"];
  }
  if (__winsList_isset)
  {
    [encoder encodeObject: __winsList forKey: @"winsList"];
  }
  if (__newsList_isset)
  {
    [encoder encodeObject: __newsList forKey: @"newsList"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__scrollNewsList release_stub];
  [__winsList release_stub];
  [__newsList release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSMutableArray *) scrollNewsList {
  return [[__scrollNewsList retain_stub] autorelease_stub];
}

- (void) setScrollNewsList: (NSMutableArray *) scrollNewsList {
  [scrollNewsList retain_stub];
  [__scrollNewsList release_stub];
  __scrollNewsList = scrollNewsList;
  __scrollNewsList_isset = YES;
}

- (BOOL) scrollNewsListIsSet {
  return __scrollNewsList_isset;
}

- (void) unsetScrollNewsList {
  [__scrollNewsList release_stub];
  __scrollNewsList = nil;
  __scrollNewsList_isset = NO;
}

- (NSMutableArray *) winsList {
  return [[__winsList retain_stub] autorelease_stub];
}

- (void) setWinsList: (NSMutableArray *) winsList {
  [winsList retain_stub];
  [__winsList release_stub];
  __winsList = winsList;
  __winsList_isset = YES;
}

- (BOOL) winsListIsSet {
  return __winsList_isset;
}

- (void) unsetWinsList {
  [__winsList release_stub];
  __winsList = nil;
  __winsList_isset = NO;
}

- (NSMutableArray *) newsList {
  return [[__newsList retain_stub] autorelease_stub];
}

- (void) setNewsList: (NSMutableArray *) newsList {
  [newsList retain_stub];
  [__newsList release_stub];
  __newsList = newsList;
  __newsList_isset = YES;
}

- (BOOL) newsListIsSet {
  return __newsList_isset;
}

- (void) unsetNewsList {
  [__newsList release_stub];
  __newsList = nil;
  __newsList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NewsBean *_elem7 = [[NewsBean alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setScrollNewsList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            NSString * _elem10 = [inProtocol readString];
            [fieldValue addObject: _elem10];
          }
          [inProtocol readListEnd];
          [self setWinsList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            NewsBean *_elem13 = [[NewsBean alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readListEnd];
          [self setNewsList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HomeRespBean"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__scrollNewsList_isset) {
    if (__scrollNewsList != nil) {
      [outProtocol writeFieldBeginWithName: @"scrollNewsList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__scrollNewsList count]];
        int i15;
        for (i15 = 0; i15 < [__scrollNewsList count]; i15++)
        {
          [[__scrollNewsList objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__winsList_isset) {
    if (__winsList != nil) {
      [outProtocol writeFieldBeginWithName: @"winsList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__winsList count]];
        int i17;
        for (i17 = 0; i17 < [__winsList count]; i17++)
        {
          [outProtocol writeString: [__winsList objectAtIndex: i17]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__newsList_isset) {
    if (__newsList != nil) {
      [outProtocol writeFieldBeginWithName: @"newsList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__newsList count]];
        int i19;
        for (i19 = 0; i19 < [__newsList count]; i19++)
        {
          [[__newsList objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HomeRespBean("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",scrollNewsList:"];
  [ms appendFormat: @"%@", __scrollNewsList];
  [ms appendString: @",winsList:"];
  [ms appendFormat: @"%@", __winsList];
  [ms appendString: @",newsList:"];
  [ms appendFormat: @"%@", __newsList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BuyBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id expect: (NSString *) expect protype: (NSString *) protype lotterytype: (NSString *) lotterytype lotteryid: (NSString *) lotteryid mainpaymoney: (double) mainpaymoney allmoney: (double) allmoney anumber: (int32_t) anumber onemoney: (double) onemoney username: (NSString *) username hnumber: (int32_t) hnumber schedule: (double) schedule prostate: (NSString *) prostate codes: (NSString *) codes isbaodi: (int32_t) isbaodi baodinum: (int32_t) baodinum object: (NSString *) object addtime: (NSString *) addtime isreturn: (int32_t) isreturn wininfo: (NSString *) wininfo wincost: (double) wincost beishu: (NSString *) beishu mystate: (NSString *) mystate allperson: (int32_t) allperson lottery_id: (NSString *) lottery_id winlevels: (NSString *) winlevels isshow: (int32_t) isshow ishm: (int32_t) ishm isjz: (NSString *) isjz isthew: (int32_t) isthew tcSelect: (int32_t) tcSelect caseInfo: (NSString *) caseInfo
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __expect = [expect retain_stub];
  __expect_isset = YES;
  __protype = [protype retain_stub];
  __protype_isset = YES;
  __lotterytype = [lotterytype retain_stub];
  __lotterytype_isset = YES;
  __lotteryid = [lotteryid retain_stub];
  __lotteryid_isset = YES;
  __mainpaymoney = mainpaymoney;
  __mainpaymoney_isset = YES;
  __allmoney = allmoney;
  __allmoney_isset = YES;
  __anumber = anumber;
  __anumber_isset = YES;
  __onemoney = onemoney;
  __onemoney_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __hnumber = hnumber;
  __hnumber_isset = YES;
  __schedule = schedule;
  __schedule_isset = YES;
  __prostate = [prostate retain_stub];
  __prostate_isset = YES;
  __codes = [codes retain_stub];
  __codes_isset = YES;
  __isbaodi = isbaodi;
  __isbaodi_isset = YES;
  __baodinum = baodinum;
  __baodinum_isset = YES;
  __object = [object retain_stub];
  __object_isset = YES;
  __addtime = [addtime retain_stub];
  __addtime_isset = YES;
  __isreturn = isreturn;
  __isreturn_isset = YES;
  __wininfo = [wininfo retain_stub];
  __wininfo_isset = YES;
  __wincost = wincost;
  __wincost_isset = YES;
  __beishu = [beishu retain_stub];
  __beishu_isset = YES;
  __mystate = [mystate retain_stub];
  __mystate_isset = YES;
  __allperson = allperson;
  __allperson_isset = YES;
  __lottery_id = [lottery_id retain_stub];
  __lottery_id_isset = YES;
  __winlevels = [winlevels retain_stub];
  __winlevels_isset = YES;
  __isshow = isshow;
  __isshow_isset = YES;
  __ishm = ishm;
  __ishm_isset = YES;
  __isjz = [isjz retain_stub];
  __isjz_isset = YES;
  __isthew = isthew;
  __isthew_isset = YES;
  __tcSelect = tcSelect;
  __tcSelect_isset = YES;
  __caseInfo = [caseInfo retain_stub];
  __caseInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"expect"])
  {
    __expect = [[decoder decodeObjectForKey: @"expect"] retain_stub];
    __expect_isset = YES;
  }
  if ([decoder containsValueForKey: @"protype"])
  {
    __protype = [[decoder decodeObjectForKey: @"protype"] retain_stub];
    __protype_isset = YES;
  }
  if ([decoder containsValueForKey: @"lotterytype"])
  {
    __lotterytype = [[decoder decodeObjectForKey: @"lotterytype"] retain_stub];
    __lotterytype_isset = YES;
  }
  if ([decoder containsValueForKey: @"lotteryid"])
  {
    __lotteryid = [[decoder decodeObjectForKey: @"lotteryid"] retain_stub];
    __lotteryid_isset = YES;
  }
  if ([decoder containsValueForKey: @"mainpaymoney"])
  {
    __mainpaymoney = [decoder decodeDoubleForKey: @"mainpaymoney"];
    __mainpaymoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"allmoney"])
  {
    __allmoney = [decoder decodeDoubleForKey: @"allmoney"];
    __allmoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"anumber"])
  {
    __anumber = [decoder decodeInt32ForKey: @"anumber"];
    __anumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"onemoney"])
  {
    __onemoney = [decoder decodeDoubleForKey: @"onemoney"];
    __onemoney_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"hnumber"])
  {
    __hnumber = [decoder decodeInt32ForKey: @"hnumber"];
    __hnumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"schedule"])
  {
    __schedule = [decoder decodeDoubleForKey: @"schedule"];
    __schedule_isset = YES;
  }
  if ([decoder containsValueForKey: @"prostate"])
  {
    __prostate = [[decoder decodeObjectForKey: @"prostate"] retain_stub];
    __prostate_isset = YES;
  }
  if ([decoder containsValueForKey: @"codes"])
  {
    __codes = [[decoder decodeObjectForKey: @"codes"] retain_stub];
    __codes_isset = YES;
  }
  if ([decoder containsValueForKey: @"isbaodi"])
  {
    __isbaodi = [decoder decodeInt32ForKey: @"isbaodi"];
    __isbaodi_isset = YES;
  }
  if ([decoder containsValueForKey: @"baodinum"])
  {
    __baodinum = [decoder decodeInt32ForKey: @"baodinum"];
    __baodinum_isset = YES;
  }
  if ([decoder containsValueForKey: @"object"])
  {
    __object = [[decoder decodeObjectForKey: @"object"] retain_stub];
    __object_isset = YES;
  }
  if ([decoder containsValueForKey: @"addtime"])
  {
    __addtime = [[decoder decodeObjectForKey: @"addtime"] retain_stub];
    __addtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"isreturn"])
  {
    __isreturn = [decoder decodeInt32ForKey: @"isreturn"];
    __isreturn_isset = YES;
  }
  if ([decoder containsValueForKey: @"wininfo"])
  {
    __wininfo = [[decoder decodeObjectForKey: @"wininfo"] retain_stub];
    __wininfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"wincost"])
  {
    __wincost = [decoder decodeDoubleForKey: @"wincost"];
    __wincost_isset = YES;
  }
  if ([decoder containsValueForKey: @"beishu"])
  {
    __beishu = [[decoder decodeObjectForKey: @"beishu"] retain_stub];
    __beishu_isset = YES;
  }
  if ([decoder containsValueForKey: @"mystate"])
  {
    __mystate = [[decoder decodeObjectForKey: @"mystate"] retain_stub];
    __mystate_isset = YES;
  }
  if ([decoder containsValueForKey: @"allperson"])
  {
    __allperson = [decoder decodeInt32ForKey: @"allperson"];
    __allperson_isset = YES;
  }
  if ([decoder containsValueForKey: @"lottery_id"])
  {
    __lottery_id = [[decoder decodeObjectForKey: @"lottery_id"] retain_stub];
    __lottery_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"winlevels"])
  {
    __winlevels = [[decoder decodeObjectForKey: @"winlevels"] retain_stub];
    __winlevels_isset = YES;
  }
  if ([decoder containsValueForKey: @"isshow"])
  {
    __isshow = [decoder decodeInt32ForKey: @"isshow"];
    __isshow_isset = YES;
  }
  if ([decoder containsValueForKey: @"ishm"])
  {
    __ishm = [decoder decodeInt32ForKey: @"ishm"];
    __ishm_isset = YES;
  }
  if ([decoder containsValueForKey: @"isjz"])
  {
    __isjz = [[decoder decodeObjectForKey: @"isjz"] retain_stub];
    __isjz_isset = YES;
  }
  if ([decoder containsValueForKey: @"isthew"])
  {
    __isthew = [decoder decodeInt32ForKey: @"isthew"];
    __isthew_isset = YES;
  }
  if ([decoder containsValueForKey: @"tcSelect"])
  {
    __tcSelect = [decoder decodeInt32ForKey: @"tcSelect"];
    __tcSelect_isset = YES;
  }
  if ([decoder containsValueForKey: @"caseInfo"])
  {
    __caseInfo = [[decoder decodeObjectForKey: @"caseInfo"] retain_stub];
    __caseInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__expect_isset)
  {
    [encoder encodeObject: __expect forKey: @"expect"];
  }
  if (__protype_isset)
  {
    [encoder encodeObject: __protype forKey: @"protype"];
  }
  if (__lotterytype_isset)
  {
    [encoder encodeObject: __lotterytype forKey: @"lotterytype"];
  }
  if (__lotteryid_isset)
  {
    [encoder encodeObject: __lotteryid forKey: @"lotteryid"];
  }
  if (__mainpaymoney_isset)
  {
    [encoder encodeDouble: __mainpaymoney forKey: @"mainpaymoney"];
  }
  if (__allmoney_isset)
  {
    [encoder encodeDouble: __allmoney forKey: @"allmoney"];
  }
  if (__anumber_isset)
  {
    [encoder encodeInt32: __anumber forKey: @"anumber"];
  }
  if (__onemoney_isset)
  {
    [encoder encodeDouble: __onemoney forKey: @"onemoney"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__hnumber_isset)
  {
    [encoder encodeInt32: __hnumber forKey: @"hnumber"];
  }
  if (__schedule_isset)
  {
    [encoder encodeDouble: __schedule forKey: @"schedule"];
  }
  if (__prostate_isset)
  {
    [encoder encodeObject: __prostate forKey: @"prostate"];
  }
  if (__codes_isset)
  {
    [encoder encodeObject: __codes forKey: @"codes"];
  }
  if (__isbaodi_isset)
  {
    [encoder encodeInt32: __isbaodi forKey: @"isbaodi"];
  }
  if (__baodinum_isset)
  {
    [encoder encodeInt32: __baodinum forKey: @"baodinum"];
  }
  if (__object_isset)
  {
    [encoder encodeObject: __object forKey: @"object"];
  }
  if (__addtime_isset)
  {
    [encoder encodeObject: __addtime forKey: @"addtime"];
  }
  if (__isreturn_isset)
  {
    [encoder encodeInt32: __isreturn forKey: @"isreturn"];
  }
  if (__wininfo_isset)
  {
    [encoder encodeObject: __wininfo forKey: @"wininfo"];
  }
  if (__wincost_isset)
  {
    [encoder encodeDouble: __wincost forKey: @"wincost"];
  }
  if (__beishu_isset)
  {
    [encoder encodeObject: __beishu forKey: @"beishu"];
  }
  if (__mystate_isset)
  {
    [encoder encodeObject: __mystate forKey: @"mystate"];
  }
  if (__allperson_isset)
  {
    [encoder encodeInt32: __allperson forKey: @"allperson"];
  }
  if (__lottery_id_isset)
  {
    [encoder encodeObject: __lottery_id forKey: @"lottery_id"];
  }
  if (__winlevels_isset)
  {
    [encoder encodeObject: __winlevels forKey: @"winlevels"];
  }
  if (__isshow_isset)
  {
    [encoder encodeInt32: __isshow forKey: @"isshow"];
  }
  if (__ishm_isset)
  {
    [encoder encodeInt32: __ishm forKey: @"ishm"];
  }
  if (__isjz_isset)
  {
    [encoder encodeObject: __isjz forKey: @"isjz"];
  }
  if (__isthew_isset)
  {
    [encoder encodeInt32: __isthew forKey: @"isthew"];
  }
  if (__tcSelect_isset)
  {
    [encoder encodeInt32: __tcSelect forKey: @"tcSelect"];
  }
  if (__caseInfo_isset)
  {
    [encoder encodeObject: __caseInfo forKey: @"caseInfo"];
  }
}

- (void) dealloc
{
  [__expect release_stub];
  [__protype release_stub];
  [__lotterytype release_stub];
  [__lotteryid release_stub];
  [__username release_stub];
  [__prostate release_stub];
  [__codes release_stub];
  [__object release_stub];
  [__addtime release_stub];
  [__wininfo release_stub];
  [__beishu release_stub];
  [__mystate release_stub];
  [__lottery_id release_stub];
  [__winlevels release_stub];
  [__isjz release_stub];
  [__caseInfo release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) expect {
  return [[__expect retain_stub] autorelease_stub];
}

- (void) setExpect: (NSString *) expect {
  [expect retain_stub];
  [__expect release_stub];
  __expect = expect;
  __expect_isset = YES;
}

- (BOOL) expectIsSet {
  return __expect_isset;
}

- (void) unsetExpect {
  [__expect release_stub];
  __expect = nil;
  __expect_isset = NO;
}

- (NSString *) protype {
  return [[__protype retain_stub] autorelease_stub];
}

- (void) setProtype: (NSString *) protype {
  [protype retain_stub];
  [__protype release_stub];
  __protype = protype;
  __protype_isset = YES;
}

- (BOOL) protypeIsSet {
  return __protype_isset;
}

- (void) unsetProtype {
  [__protype release_stub];
  __protype = nil;
  __protype_isset = NO;
}

- (NSString *) lotterytype {
  return [[__lotterytype retain_stub] autorelease_stub];
}

- (void) setLotterytype: (NSString *) lotterytype {
  [lotterytype retain_stub];
  [__lotterytype release_stub];
  __lotterytype = lotterytype;
  __lotterytype_isset = YES;
}

- (BOOL) lotterytypeIsSet {
  return __lotterytype_isset;
}

- (void) unsetLotterytype {
  [__lotterytype release_stub];
  __lotterytype = nil;
  __lotterytype_isset = NO;
}

- (NSString *) lotteryid {
  return [[__lotteryid retain_stub] autorelease_stub];
}

- (void) setLotteryid: (NSString *) lotteryid {
  [lotteryid retain_stub];
  [__lotteryid release_stub];
  __lotteryid = lotteryid;
  __lotteryid_isset = YES;
}

- (BOOL) lotteryidIsSet {
  return __lotteryid_isset;
}

- (void) unsetLotteryid {
  [__lotteryid release_stub];
  __lotteryid = nil;
  __lotteryid_isset = NO;
}

- (double) mainpaymoney {
  return __mainpaymoney;
}

- (void) setMainpaymoney: (double) mainpaymoney {
  __mainpaymoney = mainpaymoney;
  __mainpaymoney_isset = YES;
}

- (BOOL) mainpaymoneyIsSet {
  return __mainpaymoney_isset;
}

- (void) unsetMainpaymoney {
  __mainpaymoney_isset = NO;
}

- (double) allmoney {
  return __allmoney;
}

- (void) setAllmoney: (double) allmoney {
  __allmoney = allmoney;
  __allmoney_isset = YES;
}

- (BOOL) allmoneyIsSet {
  return __allmoney_isset;
}

- (void) unsetAllmoney {
  __allmoney_isset = NO;
}

- (int32_t) anumber {
  return __anumber;
}

- (void) setAnumber: (int32_t) anumber {
  __anumber = anumber;
  __anumber_isset = YES;
}

- (BOOL) anumberIsSet {
  return __anumber_isset;
}

- (void) unsetAnumber {
  __anumber_isset = NO;
}

- (double) onemoney {
  return __onemoney;
}

- (void) setOnemoney: (double) onemoney {
  __onemoney = onemoney;
  __onemoney_isset = YES;
}

- (BOOL) onemoneyIsSet {
  return __onemoney_isset;
}

- (void) unsetOnemoney {
  __onemoney_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (int32_t) hnumber {
  return __hnumber;
}

- (void) setHnumber: (int32_t) hnumber {
  __hnumber = hnumber;
  __hnumber_isset = YES;
}

- (BOOL) hnumberIsSet {
  return __hnumber_isset;
}

- (void) unsetHnumber {
  __hnumber_isset = NO;
}

- (double) schedule {
  return __schedule;
}

- (void) setSchedule: (double) schedule {
  __schedule = schedule;
  __schedule_isset = YES;
}

- (BOOL) scheduleIsSet {
  return __schedule_isset;
}

- (void) unsetSchedule {
  __schedule_isset = NO;
}

- (NSString *) prostate {
  return [[__prostate retain_stub] autorelease_stub];
}

- (void) setProstate: (NSString *) prostate {
  [prostate retain_stub];
  [__prostate release_stub];
  __prostate = prostate;
  __prostate_isset = YES;
}

- (BOOL) prostateIsSet {
  return __prostate_isset;
}

- (void) unsetProstate {
  [__prostate release_stub];
  __prostate = nil;
  __prostate_isset = NO;
}

- (NSString *) codes {
  return [[__codes retain_stub] autorelease_stub];
}

- (void) setCodes: (NSString *) codes {
  [codes retain_stub];
  [__codes release_stub];
  __codes = codes;
  __codes_isset = YES;
}

- (BOOL) codesIsSet {
  return __codes_isset;
}

- (void) unsetCodes {
  [__codes release_stub];
  __codes = nil;
  __codes_isset = NO;
}

- (int32_t) isbaodi {
  return __isbaodi;
}

- (void) setIsbaodi: (int32_t) isbaodi {
  __isbaodi = isbaodi;
  __isbaodi_isset = YES;
}

- (BOOL) isbaodiIsSet {
  return __isbaodi_isset;
}

- (void) unsetIsbaodi {
  __isbaodi_isset = NO;
}

- (int32_t) baodinum {
  return __baodinum;
}

- (void) setBaodinum: (int32_t) baodinum {
  __baodinum = baodinum;
  __baodinum_isset = YES;
}

- (BOOL) baodinumIsSet {
  return __baodinum_isset;
}

- (void) unsetBaodinum {
  __baodinum_isset = NO;
}

- (NSString *) object {
  return [[__object retain_stub] autorelease_stub];
}

- (void) setObject: (NSString *) object {
  [object retain_stub];
  [__object release_stub];
  __object = object;
  __object_isset = YES;
}

- (BOOL) objectIsSet {
  return __object_isset;
}

- (void) unsetObject {
  [__object release_stub];
  __object = nil;
  __object_isset = NO;
}

- (NSString *) addtime {
  return [[__addtime retain_stub] autorelease_stub];
}

- (void) setAddtime: (NSString *) addtime {
  [addtime retain_stub];
  [__addtime release_stub];
  __addtime = addtime;
  __addtime_isset = YES;
}

- (BOOL) addtimeIsSet {
  return __addtime_isset;
}

- (void) unsetAddtime {
  [__addtime release_stub];
  __addtime = nil;
  __addtime_isset = NO;
}

- (int32_t) isreturn {
  return __isreturn;
}

- (void) setIsreturn: (int32_t) isreturn {
  __isreturn = isreturn;
  __isreturn_isset = YES;
}

- (BOOL) isreturnIsSet {
  return __isreturn_isset;
}

- (void) unsetIsreturn {
  __isreturn_isset = NO;
}

- (NSString *) wininfo {
  return [[__wininfo retain_stub] autorelease_stub];
}

- (void) setWininfo: (NSString *) wininfo {
  [wininfo retain_stub];
  [__wininfo release_stub];
  __wininfo = wininfo;
  __wininfo_isset = YES;
}

- (BOOL) wininfoIsSet {
  return __wininfo_isset;
}

- (void) unsetWininfo {
  [__wininfo release_stub];
  __wininfo = nil;
  __wininfo_isset = NO;
}

- (double) wincost {
  return __wincost;
}

- (void) setWincost: (double) wincost {
  __wincost = wincost;
  __wincost_isset = YES;
}

- (BOOL) wincostIsSet {
  return __wincost_isset;
}

- (void) unsetWincost {
  __wincost_isset = NO;
}

- (NSString *) beishu {
  return [[__beishu retain_stub] autorelease_stub];
}

- (void) setBeishu: (NSString *) beishu {
  [beishu retain_stub];
  [__beishu release_stub];
  __beishu = beishu;
  __beishu_isset = YES;
}

- (BOOL) beishuIsSet {
  return __beishu_isset;
}

- (void) unsetBeishu {
  [__beishu release_stub];
  __beishu = nil;
  __beishu_isset = NO;
}

- (NSString *) mystate {
  return [[__mystate retain_stub] autorelease_stub];
}

- (void) setMystate: (NSString *) mystate {
  [mystate retain_stub];
  [__mystate release_stub];
  __mystate = mystate;
  __mystate_isset = YES;
}

- (BOOL) mystateIsSet {
  return __mystate_isset;
}

- (void) unsetMystate {
  [__mystate release_stub];
  __mystate = nil;
  __mystate_isset = NO;
}

- (int32_t) allperson {
  return __allperson;
}

- (void) setAllperson: (int32_t) allperson {
  __allperson = allperson;
  __allperson_isset = YES;
}

- (BOOL) allpersonIsSet {
  return __allperson_isset;
}

- (void) unsetAllperson {
  __allperson_isset = NO;
}

- (NSString *) lottery_id {
  return [[__lottery_id retain_stub] autorelease_stub];
}

- (void) setLottery_id: (NSString *) lottery_id {
  [lottery_id retain_stub];
  [__lottery_id release_stub];
  __lottery_id = lottery_id;
  __lottery_id_isset = YES;
}

- (BOOL) lottery_idIsSet {
  return __lottery_id_isset;
}

- (void) unsetLottery_id {
  [__lottery_id release_stub];
  __lottery_id = nil;
  __lottery_id_isset = NO;
}

- (NSString *) winlevels {
  return [[__winlevels retain_stub] autorelease_stub];
}

- (void) setWinlevels: (NSString *) winlevels {
  [winlevels retain_stub];
  [__winlevels release_stub];
  __winlevels = winlevels;
  __winlevels_isset = YES;
}

- (BOOL) winlevelsIsSet {
  return __winlevels_isset;
}

- (void) unsetWinlevels {
  [__winlevels release_stub];
  __winlevels = nil;
  __winlevels_isset = NO;
}

- (int32_t) isshow {
  return __isshow;
}

- (void) setIsshow: (int32_t) isshow {
  __isshow = isshow;
  __isshow_isset = YES;
}

- (BOOL) isshowIsSet {
  return __isshow_isset;
}

- (void) unsetIsshow {
  __isshow_isset = NO;
}

- (int32_t) ishm {
  return __ishm;
}

- (void) setIshm: (int32_t) ishm {
  __ishm = ishm;
  __ishm_isset = YES;
}

- (BOOL) ishmIsSet {
  return __ishm_isset;
}

- (void) unsetIshm {
  __ishm_isset = NO;
}

- (NSString *) isjz {
  return [[__isjz retain_stub] autorelease_stub];
}

- (void) setIsjz: (NSString *) isjz {
  [isjz retain_stub];
  [__isjz release_stub];
  __isjz = isjz;
  __isjz_isset = YES;
}

- (BOOL) isjzIsSet {
  return __isjz_isset;
}

- (void) unsetIsjz {
  [__isjz release_stub];
  __isjz = nil;
  __isjz_isset = NO;
}

- (int32_t) isthew {
  return __isthew;
}

- (void) setIsthew: (int32_t) isthew {
  __isthew = isthew;
  __isthew_isset = YES;
}

- (BOOL) isthewIsSet {
  return __isthew_isset;
}

- (void) unsetIsthew {
  __isthew_isset = NO;
}

- (int32_t) tcSelect {
  return __tcSelect;
}

- (void) setTcSelect: (int32_t) tcSelect {
  __tcSelect = tcSelect;
  __tcSelect_isset = YES;
}

- (BOOL) tcSelectIsSet {
  return __tcSelect_isset;
}

- (void) unsetTcSelect {
  __tcSelect_isset = NO;
}

- (NSString *) caseInfo {
  return [[__caseInfo retain_stub] autorelease_stub];
}

- (void) setCaseInfo: (NSString *) caseInfo {
  [caseInfo retain_stub];
  [__caseInfo release_stub];
  __caseInfo = caseInfo;
  __caseInfo_isset = YES;
}

- (BOOL) caseInfoIsSet {
  return __caseInfo_isset;
}

- (void) unsetCaseInfo {
  [__caseInfo release_stub];
  __caseInfo = nil;
  __caseInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLotterytype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLotteryid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMainpaymoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAllmoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAnumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setOnemoney: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHnumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSchedule: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProstate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCodes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsbaodi: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBaodinum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObject: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsreturn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWininfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWincost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBeishu: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMystate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAllperson: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLottery_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWinlevels: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsshow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIshm: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsjz: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsthew: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTcSelect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaseInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BuyBean"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__expect_isset) {
    if (__expect != nil) {
      [outProtocol writeFieldBeginWithName: @"expect" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __expect];
      [outProtocol writeFieldEnd];
    }
  }
  if (__protype_isset) {
    if (__protype != nil) {
      [outProtocol writeFieldBeginWithName: @"protype" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __protype];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lotterytype_isset) {
    if (__lotterytype != nil) {
      [outProtocol writeFieldBeginWithName: @"lotterytype" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __lotterytype];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lotteryid_isset) {
    if (__lotteryid != nil) {
      [outProtocol writeFieldBeginWithName: @"lotteryid" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lotteryid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mainpaymoney_isset) {
    [outProtocol writeFieldBeginWithName: @"mainpaymoney" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __mainpaymoney];
    [outProtocol writeFieldEnd];
  }
  if (__allmoney_isset) {
    [outProtocol writeFieldBeginWithName: @"allmoney" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __allmoney];
    [outProtocol writeFieldEnd];
  }
  if (__anumber_isset) {
    [outProtocol writeFieldBeginWithName: @"anumber" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __anumber];
    [outProtocol writeFieldEnd];
  }
  if (__onemoney_isset) {
    [outProtocol writeFieldBeginWithName: @"onemoney" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __onemoney];
    [outProtocol writeFieldEnd];
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hnumber_isset) {
    [outProtocol writeFieldBeginWithName: @"hnumber" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __hnumber];
    [outProtocol writeFieldEnd];
  }
  if (__schedule_isset) {
    [outProtocol writeFieldBeginWithName: @"schedule" type: TType_DOUBLE fieldID: 12];
    [outProtocol writeDouble: __schedule];
    [outProtocol writeFieldEnd];
  }
  if (__prostate_isset) {
    if (__prostate != nil) {
      [outProtocol writeFieldBeginWithName: @"prostate" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __prostate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__codes_isset) {
    if (__codes != nil) {
      [outProtocol writeFieldBeginWithName: @"codes" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __codes];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isbaodi_isset) {
    [outProtocol writeFieldBeginWithName: @"isbaodi" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __isbaodi];
    [outProtocol writeFieldEnd];
  }
  if (__baodinum_isset) {
    [outProtocol writeFieldBeginWithName: @"baodinum" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __baodinum];
    [outProtocol writeFieldEnd];
  }
  if (__object_isset) {
    if (__object != nil) {
      [outProtocol writeFieldBeginWithName: @"object" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __object];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addtime_isset) {
    if (__addtime != nil) {
      [outProtocol writeFieldBeginWithName: @"addtime" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __addtime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isreturn_isset) {
    [outProtocol writeFieldBeginWithName: @"isreturn" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __isreturn];
    [outProtocol writeFieldEnd];
  }
  if (__wininfo_isset) {
    if (__wininfo != nil) {
      [outProtocol writeFieldBeginWithName: @"wininfo" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __wininfo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__wincost_isset) {
    [outProtocol writeFieldBeginWithName: @"wincost" type: TType_DOUBLE fieldID: 21];
    [outProtocol writeDouble: __wincost];
    [outProtocol writeFieldEnd];
  }
  if (__beishu_isset) {
    if (__beishu != nil) {
      [outProtocol writeFieldBeginWithName: @"beishu" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __beishu];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mystate_isset) {
    if (__mystate != nil) {
      [outProtocol writeFieldBeginWithName: @"mystate" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __mystate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allperson_isset) {
    [outProtocol writeFieldBeginWithName: @"allperson" type: TType_I32 fieldID: 24];
    [outProtocol writeI32: __allperson];
    [outProtocol writeFieldEnd];
  }
  if (__lottery_id_isset) {
    if (__lottery_id != nil) {
      [outProtocol writeFieldBeginWithName: @"lottery_id" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __lottery_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__winlevels_isset) {
    if (__winlevels != nil) {
      [outProtocol writeFieldBeginWithName: @"winlevels" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __winlevels];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isshow_isset) {
    [outProtocol writeFieldBeginWithName: @"isshow" type: TType_I32 fieldID: 27];
    [outProtocol writeI32: __isshow];
    [outProtocol writeFieldEnd];
  }
  if (__ishm_isset) {
    [outProtocol writeFieldBeginWithName: @"ishm" type: TType_I32 fieldID: 28];
    [outProtocol writeI32: __ishm];
    [outProtocol writeFieldEnd];
  }
  if (__isjz_isset) {
    if (__isjz != nil) {
      [outProtocol writeFieldBeginWithName: @"isjz" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __isjz];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isthew_isset) {
    [outProtocol writeFieldBeginWithName: @"isthew" type: TType_I32 fieldID: 30];
    [outProtocol writeI32: __isthew];
    [outProtocol writeFieldEnd];
  }
  if (__tcSelect_isset) {
    [outProtocol writeFieldBeginWithName: @"tcSelect" type: TType_I32 fieldID: 31];
    [outProtocol writeI32: __tcSelect];
    [outProtocol writeFieldEnd];
  }
  if (__caseInfo_isset) {
    if (__caseInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"caseInfo" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __caseInfo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BuyBean("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",expect:"];
  [ms appendFormat: @"\"%@\"", __expect];
  [ms appendString: @",protype:"];
  [ms appendFormat: @"\"%@\"", __protype];
  [ms appendString: @",lotterytype:"];
  [ms appendFormat: @"\"%@\"", __lotterytype];
  [ms appendString: @",lotteryid:"];
  [ms appendFormat: @"\"%@\"", __lotteryid];
  [ms appendString: @",mainpaymoney:"];
  [ms appendFormat: @"%f", __mainpaymoney];
  [ms appendString: @",allmoney:"];
  [ms appendFormat: @"%f", __allmoney];
  [ms appendString: @",anumber:"];
  [ms appendFormat: @"%i", __anumber];
  [ms appendString: @",onemoney:"];
  [ms appendFormat: @"%f", __onemoney];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",hnumber:"];
  [ms appendFormat: @"%i", __hnumber];
  [ms appendString: @",schedule:"];
  [ms appendFormat: @"%f", __schedule];
  [ms appendString: @",prostate:"];
  [ms appendFormat: @"\"%@\"", __prostate];
  [ms appendString: @",codes:"];
  [ms appendFormat: @"\"%@\"", __codes];
  [ms appendString: @",isbaodi:"];
  [ms appendFormat: @"%i", __isbaodi];
  [ms appendString: @",baodinum:"];
  [ms appendFormat: @"%i", __baodinum];
  [ms appendString: @",object:"];
  [ms appendFormat: @"\"%@\"", __object];
  [ms appendString: @",addtime:"];
  [ms appendFormat: @"\"%@\"", __addtime];
  [ms appendString: @",isreturn:"];
  [ms appendFormat: @"%i", __isreturn];
  [ms appendString: @",wininfo:"];
  [ms appendFormat: @"\"%@\"", __wininfo];
  [ms appendString: @",wincost:"];
  [ms appendFormat: @"%f", __wincost];
  [ms appendString: @",beishu:"];
  [ms appendFormat: @"\"%@\"", __beishu];
  [ms appendString: @",mystate:"];
  [ms appendFormat: @"\"%@\"", __mystate];
  [ms appendString: @",allperson:"];
  [ms appendFormat: @"%i", __allperson];
  [ms appendString: @",lottery_id:"];
  [ms appendFormat: @"\"%@\"", __lottery_id];
  [ms appendString: @",winlevels:"];
  [ms appendFormat: @"\"%@\"", __winlevels];
  [ms appendString: @",isshow:"];
  [ms appendFormat: @"%i", __isshow];
  [ms appendString: @",ishm:"];
  [ms appendFormat: @"%i", __ishm];
  [ms appendString: @",isjz:"];
  [ms appendFormat: @"\"%@\"", __isjz];
  [ms appendString: @",isthew:"];
  [ms appendFormat: @"%i", __isthew];
  [ms appendString: @",tcSelect:"];
  [ms appendFormat: @"%i", __tcSelect];
  [ms appendString: @",caseInfo:"];
  [ms appendFormat: @"\"%@\"", __caseInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BuyListRespBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result total: (int32_t) total buyList: (NSMutableArray *) buyList
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __total = total;
  __total_isset = YES;
  __buyList = [buyList retain_stub];
  __buyList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt32ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"buyList"])
  {
    __buyList = [[decoder decodeObjectForKey: @"buyList"] retain_stub];
    __buyList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__total_isset)
  {
    [encoder encodeInt32: __total forKey: @"total"];
  }
  if (__buyList_isset)
  {
    [encoder encodeObject: __buyList forKey: @"buyList"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__buyList release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int32_t) total {
  return __total;
}

- (void) setTotal: (int32_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (NSMutableArray *) buyList {
  return [[__buyList retain_stub] autorelease_stub];
}

- (void) setBuyList: (NSMutableArray *) buyList {
  [buyList retain_stub];
  [__buyList release_stub];
  __buyList = buyList;
  __buyList_isset = YES;
}

- (BOOL) buyListIsSet {
  return __buyList_isset;
}

- (void) unsetBuyList {
  [__buyList release_stub];
  __buyList = nil;
  __buyList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            BuyBean *_elem22 = [[BuyBean alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setBuyList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BuyListRespBean"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __total];
    [outProtocol writeFieldEnd];
  }
  if (__buyList_isset) {
    if (__buyList != nil) {
      [outProtocol writeFieldBeginWithName: @"buyList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__buyList count]];
        int i24;
        for (i24 = 0; i24 < [__buyList count]; i24++)
        {
          [[__buyList objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BuyListRespBean("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",total:"];
  [ms appendFormat: @"%i", __total];
  [ms appendString: @",buyList:"];
  [ms appendFormat: @"%@", __buyList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecordWinCode

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIssue: (NSString *) issue datetime: (NSString *) datetime code: (NSString *) code
{
  self = [super init];
  __issue = [issue retain_stub];
  __issue_isset = YES;
  __datetime = [datetime retain_stub];
  __datetime_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"issue"])
  {
    __issue = [[decoder decodeObjectForKey: @"issue"] retain_stub];
    __issue_isset = YES;
  }
  if ([decoder containsValueForKey: @"datetime"])
  {
    __datetime = [[decoder decodeObjectForKey: @"datetime"] retain_stub];
    __datetime_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__issue_isset)
  {
    [encoder encodeObject: __issue forKey: @"issue"];
  }
  if (__datetime_isset)
  {
    [encoder encodeObject: __datetime forKey: @"datetime"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
}

- (void) dealloc
{
  [__issue release_stub];
  [__datetime release_stub];
  [__code release_stub];
  [super dealloc_stub];
}

- (NSString *) issue {
  return [[__issue retain_stub] autorelease_stub];
}

- (void) setIssue: (NSString *) issue {
  [issue retain_stub];
  [__issue release_stub];
  __issue = issue;
  __issue_isset = YES;
}

- (BOOL) issueIsSet {
  return __issue_isset;
}

- (void) unsetIssue {
  [__issue release_stub];
  __issue = nil;
  __issue_isset = NO;
}

- (NSString *) datetime {
  return [[__datetime retain_stub] autorelease_stub];
}

- (void) setDatetime: (NSString *) datetime {
  [datetime retain_stub];
  [__datetime release_stub];
  __datetime = datetime;
  __datetime_isset = YES;
}

- (BOOL) datetimeIsSet {
  return __datetime_isset;
}

- (void) unsetDatetime {
  [__datetime release_stub];
  __datetime = nil;
  __datetime_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIssue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDatetime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecordWinCode"];
  if (__issue_isset) {
    if (__issue != nil) {
      [outProtocol writeFieldBeginWithName: @"issue" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __issue];
      [outProtocol writeFieldEnd];
    }
  }
  if (__datetime_isset) {
    if (__datetime != nil) {
      [outProtocol writeFieldBeginWithName: @"datetime" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __datetime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecordWinCode("];
  [ms appendString: @"issue:"];
  [ms appendFormat: @"\"%@\"", __issue];
  [ms appendString: @",datetime:"];
  [ms appendFormat: @"\"%@\"", __datetime];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecordWinCodeListResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (Result *) result total: (int32_t) total recordList: (NSMutableArray *) recordList
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __total = total;
  __total_isset = YES;
  __recordList = [recordList retain_stub];
  __recordList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt32ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordList"])
  {
    __recordList = [[decoder decodeObjectForKey: @"recordList"] retain_stub];
    __recordList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__total_isset)
  {
    [encoder encodeInt32: __total forKey: @"total"];
  }
  if (__recordList_isset)
  {
    [encoder encodeObject: __recordList forKey: @"recordList"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [__recordList release_stub];
  [super dealloc_stub];
}

- (Result *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (Result *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int32_t) total {
  return __total;
}

- (void) setTotal: (int32_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (NSMutableArray *) recordList {
  return [[__recordList retain_stub] autorelease_stub];
}

- (void) setRecordList: (NSMutableArray *) recordList {
  [recordList retain_stub];
  [__recordList release_stub];
  __recordList = recordList;
  __recordList_isset = YES;
}

- (BOOL) recordListIsSet {
  return __recordList_isset;
}

- (void) unsetRecordList {
  [__recordList release_stub];
  __recordList = nil;
  __recordList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            RecordWinCode *_elem27 = [[RecordWinCode alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecordList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecordWinCodeListResp"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __total];
    [outProtocol writeFieldEnd];
  }
  if (__recordList_isset) {
    if (__recordList != nil) {
      [outProtocol writeFieldBeginWithName: @"recordList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recordList count]];
        int i29;
        for (i29 = 0; i29 < [__recordList count]; i29++)
        {
          [[__recordList objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecordWinCodeListResp("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",total:"];
  [ms appendFormat: @"%i", __total];
  [ms appendString: @",recordList:"];
  [ms appendFormat: @"%@", __recordList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation uappConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <TBase, NSCoding> {
  NSString * __loginName;
  NSString * __pwd;
  NSString * __timestamp;
  NSString * __verifyCode;
  NSString * __deviceId;
  int32_t __loginType;

  BOOL __loginName_isset;
  BOOL __pwd_isset;
  BOOL __timestamp_isset;
  BOOL __verifyCode_isset;
  BOOL __deviceId_isset;
  BOOL __loginType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=loginName, setter=setLoginName:) NSString * loginName;
@property (nonatomic, retain, getter=pwd, setter=setPwd:) NSString * pwd;
@property (nonatomic, retain, getter=timestamp, setter=setTimestamp:) NSString * timestamp;
@property (nonatomic, retain, getter=verifyCode, setter=setVerifyCode:) NSString * verifyCode;
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
@property (nonatomic, getter=loginType, setter=setLoginType:) int32_t loginType;
#endif

- (id) init;
- (id) initWithLoginName: (NSString *) loginName pwd: (NSString *) pwd timestamp: (NSString *) timestamp verifyCode: (NSString *) verifyCode deviceId: (NSString *) deviceId loginType: (int32_t) loginType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) loginName;
- (void) setLoginName: (NSString *) loginName;
#endif
- (BOOL) loginNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd;
- (void) setPwd: (NSString *) pwd;
#endif
- (BOOL) pwdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) timestamp;
- (void) setTimestamp: (NSString *) timestamp;
#endif
- (BOOL) timestampIsSet;

#if !__has_feature(objc_arc)
- (NSString *) verifyCode;
- (void) setVerifyCode: (NSString *) verifyCode;
#endif
- (BOOL) verifyCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
#endif
- (BOOL) deviceIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) loginType;
- (void) setLoginType: (int32_t) loginType;
#endif
- (BOOL) loginTypeIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLoginName: (NSString *) loginName pwd: (NSString *) pwd timestamp: (NSString *) timestamp verifyCode: (NSString *) verifyCode deviceId: (NSString *) deviceId loginType: (int32_t) loginType
{
  self = [super init];
  __loginName = [loginName retain_stub];
  __loginName_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __timestamp = [timestamp retain_stub];
  __timestamp_isset = YES;
  __verifyCode = [verifyCode retain_stub];
  __verifyCode_isset = YES;
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  __loginType = loginType;
  __loginType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"loginName"])
  {
    __loginName = [[decoder decodeObjectForKey: @"loginName"] retain_stub];
    __loginName_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [[decoder decodeObjectForKey: @"timestamp"] retain_stub];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"verifyCode"])
  {
    __verifyCode = [[decoder decodeObjectForKey: @"verifyCode"] retain_stub];
    __verifyCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginType"])
  {
    __loginType = [decoder decodeInt32ForKey: @"loginType"];
    __loginType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__loginName_isset)
  {
    [encoder encodeObject: __loginName forKey: @"loginName"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeObject: __timestamp forKey: @"timestamp"];
  }
  if (__verifyCode_isset)
  {
    [encoder encodeObject: __verifyCode forKey: @"verifyCode"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
  if (__loginType_isset)
  {
    [encoder encodeInt32: __loginType forKey: @"loginType"];
  }
}

- (void) dealloc
{
  [__loginName release_stub];
  [__pwd release_stub];
  [__timestamp release_stub];
  [__verifyCode release_stub];
  [__deviceId release_stub];
  [super dealloc_stub];
}

- (NSString *) loginName {
  return [[__loginName retain_stub] autorelease_stub];
}

- (void) setLoginName: (NSString *) loginName {
  [loginName retain_stub];
  [__loginName release_stub];
  __loginName = loginName;
  __loginName_isset = YES;
}

- (BOOL) loginNameIsSet {
  return __loginName_isset;
}

- (void) unsetLoginName {
  [__loginName release_stub];
  __loginName = nil;
  __loginName_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (NSString *) timestamp {
  return [[__timestamp retain_stub] autorelease_stub];
}

- (void) setTimestamp: (NSString *) timestamp {
  [timestamp retain_stub];
  [__timestamp release_stub];
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  [__timestamp release_stub];
  __timestamp = nil;
  __timestamp_isset = NO;
}

- (NSString *) verifyCode {
  return [[__verifyCode retain_stub] autorelease_stub];
}

- (void) setVerifyCode: (NSString *) verifyCode {
  [verifyCode retain_stub];
  [__verifyCode release_stub];
  __verifyCode = verifyCode;
  __verifyCode_isset = YES;
}

- (BOOL) verifyCodeIsSet {
  return __verifyCode_isset;
}

- (void) unsetVerifyCode {
  [__verifyCode release_stub];
  __verifyCode = nil;
  __verifyCode_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (int32_t) loginType {
  return __loginType;
}

- (void) setLoginType: (int32_t) loginType {
  __loginType = loginType;
  __loginType_isset = YES;
}

- (BOOL) loginTypeIsSet {
  return __loginType_isset;
}

- (void) unsetLoginType {
  __loginType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVerifyCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLoginType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__loginName_isset) {
    if (__loginName != nil) {
      [outProtocol writeFieldBeginWithName: @"loginName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __loginName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    if (__timestamp != nil) {
      [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __timestamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__verifyCode_isset) {
    if (__verifyCode != nil) {
      [outProtocol writeFieldBeginWithName: @"verifyCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __verifyCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginType_isset) {
    [outProtocol writeFieldBeginWithName: @"loginType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __loginType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"loginName:"];
  [ms appendFormat: @"\"%@\"", __loginName];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"\"%@\"", __timestamp];
  [ms appendString: @",verifyCode:"];
  [ms appendFormat: @"\"%@\"", __verifyCode];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @",loginType:"];
  [ms appendFormat: @"%i", __loginType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  LoginRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginRespBean *) success;
- (void) setSuccess: (LoginRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginRespBean *fieldValue = [[LoginRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <TBase, NSCoding> {
  NSString * __key;

  BOOL __key_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=key, setter=setKey:) NSString * key;
#endif

- (id) init;
- (id) initWithKey: (NSString *) key;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) key;
- (void) setKey: (NSString *) key;
#endif
- (BOOL) keyIsSet;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
}

- (void) dealloc
{
  [__key release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <TBase, NSCoding> {
  Result * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Result * success;
#endif

- (id) init;
- (id) initWithSuccess: (Result *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Result *) success;
- (void) setSuccess: (Result *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Logout_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Result *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Result *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Result *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getVerifyCode_args : NSObject <TBase, NSCoding> {
  NSString * __deviceId;

  BOOL __deviceId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
#endif

- (id) init;
- (id) initWithDeviceId: (NSString *) deviceId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
#endif
- (BOOL) deviceIdIsSet;

@end

@implementation getVerifyCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (NSString *) deviceId
{
  self = [super init];
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release_stub];
  [super dealloc_stub];
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getVerifyCode_args"];
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getVerifyCode_args("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetVerifyCode_result : NSObject <TBase, NSCoding> {
  VerifyCodeRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) VerifyCodeRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (VerifyCodeRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (VerifyCodeRespBean *) success;
- (void) setSuccess: (VerifyCodeRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetVerifyCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (VerifyCodeRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (VerifyCodeRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (VerifyCodeRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VerifyCodeRespBean *fieldValue = [[VerifyCodeRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVerifyCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVerifyCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getScrollNewsList_args : NSObject <TBase, NSCoding> {
  int32_t __limit;

  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=limit, setter=setLimit:) int32_t limit;
#endif

- (id) init;
- (id) initWithLimit: (int32_t) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) limit;
- (void) setLimit: (int32_t) limit;
#endif
- (BOOL) limitIsSet;

@end

@implementation getScrollNewsList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLimit: (int32_t) limit
{
  self = [super init];
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getScrollNewsList_args"];
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getScrollNewsList_args("];
  [ms appendString: @"limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetScrollNewsList_result : NSObject <TBase, NSCoding> {
  NewsListRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NewsListRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (NewsListRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NewsListRespBean *) success;
- (void) setSuccess: (NewsListRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetScrollNewsList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NewsListRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NewsListRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NewsListRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NewsListRespBean *fieldValue = [[NewsListRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetScrollNewsList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetScrollNewsList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getNewsList_args : NSObject <TBase, NSCoding> {
  int32_t __page;
  int32_t __rows;

  BOOL __page_isset;
  BOOL __rows_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=rows, setter=setRows:) int32_t rows;
#endif

- (id) init;
- (id) initWithPage: (int32_t) page rows: (int32_t) rows;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) rows;
- (void) setRows: (int32_t) rows;
#endif
- (BOOL) rowsIsSet;

@end

@implementation getNewsList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage: (int32_t) page rows: (int32_t) rows
{
  self = [super init];
  __page = page;
  __page_isset = YES;
  __rows = rows;
  __rows_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"rows"])
  {
    __rows = [decoder decodeInt32ForKey: @"rows"];
    __rows_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__rows_isset)
  {
    [encoder encodeInt32: __rows forKey: @"rows"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) rows {
  return __rows;
}

- (void) setRows: (int32_t) rows {
  __rows = rows;
  __rows_isset = YES;
}

- (BOOL) rowsIsSet {
  return __rows_isset;
}

- (void) unsetRows {
  __rows_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRows: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getNewsList_args"];
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__rows_isset) {
    [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __rows];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getNewsList_args("];
  [ms appendString: @"page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",rows:"];
  [ms appendFormat: @"%i", __rows];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetNewsList_result : NSObject <TBase, NSCoding> {
  NewsListRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NewsListRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (NewsListRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NewsListRespBean *) success;
- (void) setSuccess: (NewsListRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetNewsList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NewsListRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NewsListRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NewsListRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NewsListRespBean *fieldValue = [[NewsListRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNewsList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNewsList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getHome_args : NSObject <TBase, NSCoding> {
  NSString * __deviceId;

  BOOL __deviceId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
#endif

- (id) init;
- (id) initWithDeviceId: (NSString *) deviceId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
#endif
- (BOOL) deviceIdIsSet;

@end

@implementation getHome_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (NSString *) deviceId
{
  self = [super init];
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release_stub];
  [super dealloc_stub];
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getHome_args"];
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getHome_args("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetHome_result : NSObject <TBase, NSCoding> {
  HomeRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HomeRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (HomeRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (HomeRespBean *) success;
- (void) setSuccess: (HomeRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetHome_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (HomeRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (HomeRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (HomeRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          HomeRespBean *fieldValue = [[HomeRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHome_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHome_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserInfo_args : NSObject <TBase, NSCoding> {
  NSString * __key;

  BOOL __key_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=key, setter=setKey:) NSString * key;
#endif

- (id) init;
- (id) initWithKey: (NSString *) key;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) key;
- (void) setKey: (NSString *) key;
#endif
- (BOOL) keyIsSet;

@end

@implementation getUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
}

- (void) dealloc
{
  [__key release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserInfo_args("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserInfo_result : NSObject <TBase, NSCoding> {
  LoginRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginRespBean *) success;
- (void) setSuccess: (LoginRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginRespBean *fieldValue = [[LoginRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getBuyList_args : NSObject <TBase, NSCoding> {
  NSString * __key;
  NSString * __type;
  int32_t __page;
  int32_t __rows;

  BOOL __key_isset;
  BOOL __type_isset;
  BOOL __page_isset;
  BOOL __rows_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=key, setter=setKey:) NSString * key;
@property (nonatomic, retain, getter=type, setter=setType:) NSString * type;
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=rows, setter=setRows:) int32_t rows;
#endif

- (id) init;
- (id) initWithKey: (NSString *) key type: (NSString *) type page: (int32_t) page rows: (int32_t) rows;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) key;
- (void) setKey: (NSString *) key;
#endif
- (BOOL) keyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) type;
- (void) setType: (NSString *) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) rows;
- (void) setRows: (int32_t) rows;
#endif
- (BOOL) rowsIsSet;

@end

@implementation getBuyList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key type: (NSString *) type page: (int32_t) page rows: (int32_t) rows
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __page = page;
  __page_isset = YES;
  __rows = rows;
  __rows_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"rows"])
  {
    __rows = [decoder decodeInt32ForKey: @"rows"];
    __rows_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__rows_isset)
  {
    [encoder encodeInt32: __rows forKey: @"rows"];
  }
}

- (void) dealloc
{
  [__key release_stub];
  [__type release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) rows {
  return __rows;
}

- (void) setRows: (int32_t) rows {
  __rows = rows;
  __rows_isset = YES;
}

- (BOOL) rowsIsSet {
  return __rows_isset;
}

- (void) unsetRows {
  __rows_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRows: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getBuyList_args"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__rows_isset) {
    [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __rows];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getBuyList_args("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",rows:"];
  [ms appendFormat: @"%i", __rows];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetBuyList_result : NSObject <TBase, NSCoding> {
  BuyListRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BuyListRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (BuyListRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BuyListRespBean *) success;
- (void) setSuccess: (BuyListRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetBuyList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BuyListRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (BuyListRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BuyListRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BuyListRespBean *fieldValue = [[BuyListRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBuyList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetBuyList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface doBuy_args : NSObject <TBase, NSCoding> {
  NSString * __key;
  NSString * __codes;
  NSString * __jsonParams;

  BOOL __key_isset;
  BOOL __codes_isset;
  BOOL __jsonParams_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=key, setter=setKey:) NSString * key;
@property (nonatomic, retain, getter=codes, setter=setCodes:) NSString * codes;
@property (nonatomic, retain, getter=jsonParams, setter=setJsonParams:) NSString * jsonParams;
#endif

- (id) init;
- (id) initWithKey: (NSString *) key codes: (NSString *) codes jsonParams: (NSString *) jsonParams;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) key;
- (void) setKey: (NSString *) key;
#endif
- (BOOL) keyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) codes;
- (void) setCodes: (NSString *) codes;
#endif
- (BOOL) codesIsSet;

#if !__has_feature(objc_arc)
- (NSString *) jsonParams;
- (void) setJsonParams: (NSString *) jsonParams;
#endif
- (BOOL) jsonParamsIsSet;

@end

@implementation doBuy_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key codes: (NSString *) codes jsonParams: (NSString *) jsonParams
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  __codes = [codes retain_stub];
  __codes_isset = YES;
  __jsonParams = [jsonParams retain_stub];
  __jsonParams_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"codes"])
  {
    __codes = [[decoder decodeObjectForKey: @"codes"] retain_stub];
    __codes_isset = YES;
  }
  if ([decoder containsValueForKey: @"jsonParams"])
  {
    __jsonParams = [[decoder decodeObjectForKey: @"jsonParams"] retain_stub];
    __jsonParams_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__codes_isset)
  {
    [encoder encodeObject: __codes forKey: @"codes"];
  }
  if (__jsonParams_isset)
  {
    [encoder encodeObject: __jsonParams forKey: @"jsonParams"];
  }
}

- (void) dealloc
{
  [__key release_stub];
  [__codes release_stub];
  [__jsonParams release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) codes {
  return [[__codes retain_stub] autorelease_stub];
}

- (void) setCodes: (NSString *) codes {
  [codes retain_stub];
  [__codes release_stub];
  __codes = codes;
  __codes_isset = YES;
}

- (BOOL) codesIsSet {
  return __codes_isset;
}

- (void) unsetCodes {
  [__codes release_stub];
  __codes = nil;
  __codes_isset = NO;
}

- (NSString *) jsonParams {
  return [[__jsonParams retain_stub] autorelease_stub];
}

- (void) setJsonParams: (NSString *) jsonParams {
  [jsonParams retain_stub];
  [__jsonParams release_stub];
  __jsonParams = jsonParams;
  __jsonParams_isset = YES;
}

- (BOOL) jsonParamsIsSet {
  return __jsonParams_isset;
}

- (void) unsetJsonParams {
  [__jsonParams release_stub];
  __jsonParams = nil;
  __jsonParams_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCodes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJsonParams: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"doBuy_args"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__codes_isset) {
    if (__codes != nil) {
      [outProtocol writeFieldBeginWithName: @"codes" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __codes];
      [outProtocol writeFieldEnd];
    }
  }
  if (__jsonParams_isset) {
    if (__jsonParams != nil) {
      [outProtocol writeFieldBeginWithName: @"jsonParams" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __jsonParams];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"doBuy_args("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",codes:"];
  [ms appendFormat: @"\"%@\"", __codes];
  [ms appendString: @",jsonParams:"];
  [ms appendFormat: @"\"%@\"", __jsonParams];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DoBuy_result : NSObject <TBase, NSCoding> {
  Result * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Result * success;
#endif

- (id) init;
- (id) initWithSuccess: (Result *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Result *) success;
- (void) setSuccess: (Result *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DoBuy_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Result *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Result *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Result *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Result *fieldValue = [[Result alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DoBuy_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DoBuy_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getWinBuyList_args : NSObject <TBase, NSCoding> {
  NSString * __name;
  int32_t __rows;

  BOOL __name_isset;
  BOOL __rows_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, getter=rows, setter=setRows:) int32_t rows;
#endif

- (id) init;
- (id) initWithName: (NSString *) name rows: (int32_t) rows;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (int32_t) rows;
- (void) setRows: (int32_t) rows;
#endif
- (BOOL) rowsIsSet;

@end

@implementation getWinBuyList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name rows: (int32_t) rows
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __rows = rows;
  __rows_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"rows"])
  {
    __rows = [decoder decodeInt32ForKey: @"rows"];
    __rows_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__rows_isset)
  {
    [encoder encodeInt32: __rows forKey: @"rows"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) rows {
  return __rows;
}

- (void) setRows: (int32_t) rows {
  __rows = rows;
  __rows_isset = YES;
}

- (BOOL) rowsIsSet {
  return __rows_isset;
}

- (void) unsetRows {
  __rows_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRows: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getWinBuyList_args"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rows_isset) {
    [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __rows];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getWinBuyList_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",rows:"];
  [ms appendFormat: @"%i", __rows];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetWinBuyList_result : NSObject <TBase, NSCoding> {
  BuyListRespBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BuyListRespBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (BuyListRespBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BuyListRespBean *) success;
- (void) setSuccess: (BuyListRespBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetWinBuyList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BuyListRespBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (BuyListRespBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BuyListRespBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BuyListRespBean *fieldValue = [[BuyListRespBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetWinBuyList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetWinBuyList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getWinCodesById_args : NSObject <TBase, NSCoding> {
  NSString * __id;

  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) NSString * id;
#endif

- (id) init;
- (id) initWithId: (NSString *) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) id;
- (void) setId: (NSString *) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getWinCodesById_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getWinCodesById_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getWinCodesById_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetWinCodesById_result : NSObject <TBase, NSCoding> {
  RecordWinCodeListResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RecordWinCodeListResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (RecordWinCodeListResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecordWinCodeListResp *) success;
- (void) setSuccess: (RecordWinCodeListResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetWinCodesById_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RecordWinCodeListResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RecordWinCodeListResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RecordWinCodeListResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RecordWinCodeListResp *fieldValue = [[RecordWinCodeListResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetWinCodesById_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetWinCodesById_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRecordWinCodeList_args : NSObject <TBase, NSCoding> {
  NSString * __type;

  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=type, setter=setType:) NSString * type;
#endif

- (id) init;
- (id) initWithType: (NSString *) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) type;
- (void) setType: (NSString *) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation getRecordWinCodeList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (NSString *) type
{
  self = [super init];
  __type = [type retain_stub];
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
}

- (void) dealloc
{
  [__type release_stub];
  [super dealloc_stub];
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRecordWinCodeList_args"];
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRecordWinCodeList_args("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRecordWinCodeList_result : NSObject <TBase, NSCoding> {
  RecordWinCodeListResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RecordWinCodeListResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (RecordWinCodeListResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecordWinCodeListResp *) success;
- (void) setSuccess: (RecordWinCodeListResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRecordWinCodeList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RecordWinCodeListResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RecordWinCodeListResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RecordWinCodeListResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RecordWinCodeListResp *fieldValue = [[RecordWinCodeListResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecordWinCodeList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRecordWinCodeList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UappServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_login: (NSString *) loginName pwd: (NSString *) pwd timestamp: (NSString *) timestamp verifyCode: (NSString *) verifyCode deviceId: (NSString *) deviceId loginType: (int32_t) loginType
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (loginName != nil)  {
    [outProtocol writeFieldBeginWithName: @"loginName" type: TType_STRING fieldID: 1];
    [outProtocol writeString: loginName];
    [outProtocol writeFieldEnd];
  }
  if (pwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: pwd];
    [outProtocol writeFieldEnd];
  }
  if (timestamp != nil)  {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_STRING fieldID: 3];
    [outProtocol writeString: timestamp];
    [outProtocol writeFieldEnd];
  }
  if (verifyCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"verifyCode" type: TType_STRING fieldID: 4];
    [outProtocol writeString: verifyCode];
    [outProtocol writeFieldEnd];
  }
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 5];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"loginType" type: TType_I32 fieldID: 6];
  [outProtocol writeI32: loginType];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginRespBean *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginRespBean *) login: (NSString *) loginName pwd: (NSString *) pwd timestamp: (NSString *) timestamp verifyCode: (NSString *) verifyCode deviceId: (NSString *) deviceId loginType: (int32_t) loginType
{
  [self send_login : loginName pwd: pwd timestamp: timestamp verifyCode: verifyCode deviceId: deviceId loginType: loginType];
  return [self recv_login];
}

- (void) send_logout: (NSString *) key
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Result *) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"logout failed: unknown result"];
}

- (Result *) logout: (NSString *) key
{
  [self send_logout : key];
  return [self recv_logout];
}

- (void) send_getVerifyCode: (NSString *) deviceId
{
  [outProtocol writeMessageBeginWithName: @"getVerifyCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getVerifyCode_args"];
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (VerifyCodeRespBean *) recv_getVerifyCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetVerifyCode_result * result = [[[GetVerifyCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getVerifyCode failed: unknown result"];
}

- (VerifyCodeRespBean *) getVerifyCode: (NSString *) deviceId
{
  [self send_getVerifyCode : deviceId];
  return [self recv_getVerifyCode];
}

- (void) send_getScrollNewsList: (int32_t) limit
{
  [outProtocol writeMessageBeginWithName: @"getScrollNewsList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getScrollNewsList_args"];
  [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: limit];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NewsListRespBean *) recv_getScrollNewsList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetScrollNewsList_result * result = [[[GetScrollNewsList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getScrollNewsList failed: unknown result"];
}

- (NewsListRespBean *) getScrollNewsList: (int32_t) limit
{
  [self send_getScrollNewsList : limit];
  return [self recv_getScrollNewsList];
}

- (void) send_getNewsList: (int32_t) page rows: (int32_t) rows
{
  [outProtocol writeMessageBeginWithName: @"getNewsList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getNewsList_args"];
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: rows];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NewsListRespBean *) recv_getNewsList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetNewsList_result * result = [[[GetNewsList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getNewsList failed: unknown result"];
}

- (NewsListRespBean *) getNewsList: (int32_t) page rows: (int32_t) rows
{
  [self send_getNewsList : page rows: rows];
  return [self recv_getNewsList];
}

- (void) send_getHome: (NSString *) deviceId
{
  [outProtocol writeMessageBeginWithName: @"getHome" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getHome_args"];
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (HomeRespBean *) recv_getHome
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetHome_result * result = [[[GetHome_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getHome failed: unknown result"];
}

- (HomeRespBean *) getHome: (NSString *) deviceId
{
  [self send_getHome : deviceId];
  return [self recv_getHome];
}

- (void) send_getUserInfo: (NSString *) key
{
  [outProtocol writeMessageBeginWithName: @"getUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginRespBean *) recv_getUserInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetUserInfo_result * result = [[[GetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserInfo failed: unknown result"];
}

- (LoginRespBean *) getUserInfo: (NSString *) key
{
  [self send_getUserInfo : key];
  return [self recv_getUserInfo];
}

- (void) send_getBuyList: (NSString *) key type: (NSString *) type page: (int32_t) page rows: (int32_t) rows
{
  [outProtocol writeMessageBeginWithName: @"getBuyList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getBuyList_args"];
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (type != nil)  {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
    [outProtocol writeString: type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: rows];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BuyListRespBean *) recv_getBuyList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetBuyList_result * result = [[[GetBuyList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getBuyList failed: unknown result"];
}

- (BuyListRespBean *) getBuyList: (NSString *) key type: (NSString *) type page: (int32_t) page rows: (int32_t) rows
{
  [self send_getBuyList : key type: type page: page rows: rows];
  return [self recv_getBuyList];
}

- (void) send_doBuy: (NSString *) key codes: (NSString *) codes jsonParams: (NSString *) jsonParams
{
  [outProtocol writeMessageBeginWithName: @"doBuy" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"doBuy_args"];
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (codes != nil)  {
    [outProtocol writeFieldBeginWithName: @"codes" type: TType_STRING fieldID: 2];
    [outProtocol writeString: codes];
    [outProtocol writeFieldEnd];
  }
  if (jsonParams != nil)  {
    [outProtocol writeFieldBeginWithName: @"jsonParams" type: TType_STRING fieldID: 3];
    [outProtocol writeString: jsonParams];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Result *) recv_doBuy
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DoBuy_result * result = [[[DoBuy_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"doBuy failed: unknown result"];
}

- (Result *) doBuy: (NSString *) key codes: (NSString *) codes jsonParams: (NSString *) jsonParams
{
  [self send_doBuy : key codes: codes jsonParams: jsonParams];
  return [self recv_doBuy];
}

- (void) send_getWinBuyList: (NSString *) name rows: (int32_t) rows
{
  [outProtocol writeMessageBeginWithName: @"getWinBuyList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getWinBuyList_args"];
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"rows" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: rows];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BuyListRespBean *) recv_getWinBuyList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetWinBuyList_result * result = [[[GetWinBuyList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getWinBuyList failed: unknown result"];
}

- (BuyListRespBean *) getWinBuyList: (NSString *) name rows: (int32_t) rows
{
  [self send_getWinBuyList : name rows: rows];
  return [self recv_getWinBuyList];
}

- (void) send_getWinCodesById: (NSString *) id
{
  [outProtocol writeMessageBeginWithName: @"getWinCodesById" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getWinCodesById_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RecordWinCodeListResp *) recv_getWinCodesById
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetWinCodesById_result * result = [[[GetWinCodesById_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getWinCodesById failed: unknown result"];
}

- (RecordWinCodeListResp *) getWinCodesById: (NSString *) id
{
  [self send_getWinCodesById : id];
  return [self recv_getWinCodesById];
}

- (void) send_getRecordWinCodeList: (NSString *) type
{
  [outProtocol writeMessageBeginWithName: @"getRecordWinCodeList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRecordWinCodeList_args"];
  if (type != nil)  {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 1];
    [outProtocol writeString: type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RecordWinCodeListResp *) recv_getRecordWinCodeList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRecordWinCodeList_result * result = [[[GetRecordWinCodeList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRecordWinCodeList failed: unknown result"];
}

- (RecordWinCodeListResp *) getRecordWinCodeList: (NSString *) type
{
  [self send_getRecordWinCodeList : type];
  return [self recv_getRecordWinCodeList];
}

@end

@implementation UappServiceProcessor

- (id) initWithUappService: (id <UappService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  {
    SEL s = @selector(process_getVerifyCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getVerifyCode"];
  }
  {
    SEL s = @selector(process_getScrollNewsList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getScrollNewsList"];
  }
  {
    SEL s = @selector(process_getNewsList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getNewsList"];
  }
  {
    SEL s = @selector(process_getHome_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getHome"];
  }
  {
    SEL s = @selector(process_getUserInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUserInfo"];
  }
  {
    SEL s = @selector(process_getBuyList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getBuyList"];
  }
  {
    SEL s = @selector(process_doBuy_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"doBuy"];
  }
  {
    SEL s = @selector(process_getWinBuyList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getWinBuyList"];
  }
  {
    SEL s = @selector(process_getWinCodesById_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getWinCodesById"];
  }
  {
    SEL s = @selector(process_getRecordWinCodeList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRecordWinCodeList"];
  }
  return self;
}

- (id<UappService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args loginName] pwd: [args pwd] timestamp: [args timestamp] verifyCode: [args verifyCode] deviceId: [args deviceId] loginType: [args loginType]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [result setSuccess: [mService logout: [args key]]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getVerifyCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getVerifyCode_args * args = [[getVerifyCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetVerifyCode_result * result = [[GetVerifyCode_result alloc] init];
  [result setSuccess: [mService getVerifyCode: [args deviceId]]];
  [outProtocol writeMessageBeginWithName: @"getVerifyCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getScrollNewsList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getScrollNewsList_args * args = [[getScrollNewsList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetScrollNewsList_result * result = [[GetScrollNewsList_result alloc] init];
  [result setSuccess: [mService getScrollNewsList: [args limit]]];
  [outProtocol writeMessageBeginWithName: @"getScrollNewsList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getNewsList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getNewsList_args * args = [[getNewsList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetNewsList_result * result = [[GetNewsList_result alloc] init];
  [result setSuccess: [mService getNewsList: [args page] rows: [args rows]]];
  [outProtocol writeMessageBeginWithName: @"getNewsList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getHome_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getHome_args * args = [[getHome_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetHome_result * result = [[GetHome_result alloc] init];
  [result setSuccess: [mService getHome: [args deviceId]]];
  [outProtocol writeMessageBeginWithName: @"getHome"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getUserInfo_args * args = [[getUserInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetUserInfo_result * result = [[GetUserInfo_result alloc] init];
  [result setSuccess: [mService getUserInfo: [args key]]];
  [outProtocol writeMessageBeginWithName: @"getUserInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getBuyList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getBuyList_args * args = [[getBuyList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetBuyList_result * result = [[GetBuyList_result alloc] init];
  [result setSuccess: [mService getBuyList: [args key] type: [args type] page: [args page] rows: [args rows]]];
  [outProtocol writeMessageBeginWithName: @"getBuyList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_doBuy_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  doBuy_args * args = [[doBuy_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  DoBuy_result * result = [[DoBuy_result alloc] init];
  [result setSuccess: [mService doBuy: [args key] codes: [args codes] jsonParams: [args jsonParams]]];
  [outProtocol writeMessageBeginWithName: @"doBuy"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getWinBuyList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getWinBuyList_args * args = [[getWinBuyList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetWinBuyList_result * result = [[GetWinBuyList_result alloc] init];
  [result setSuccess: [mService getWinBuyList: [args name] rows: [args rows]]];
  [outProtocol writeMessageBeginWithName: @"getWinBuyList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getWinCodesById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getWinCodesById_args * args = [[getWinCodesById_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetWinCodesById_result * result = [[GetWinCodesById_result alloc] init];
  [result setSuccess: [mService getWinCodesById: [args id]]];
  [outProtocol writeMessageBeginWithName: @"getWinCodesById"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getRecordWinCodeList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRecordWinCodeList_args * args = [[getRecordWinCodeList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRecordWinCodeList_result * result = [[GetRecordWinCodeList_result alloc] init];
  [result setSuccess: [mService getRecordWinCodeList: [args type]]];
  [outProtocol writeMessageBeginWithName: @"getRecordWinCodeList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

